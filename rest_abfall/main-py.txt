@app.route('/')
@prevent_quiz_exit 
def index():
    # Wenn Benutzer angemeldet ist: serverseitig ausloggen
    if 'username' in session:
        # Falls ein Quiz läuft: Timer stoppen
        if 'quiz_data' in session:
            room_id = session['quiz_data'].get('room_id')
            if room_id:
                stop_timer(room_id)
        # Session komplett löschen
        session.clear()

    # Gespeicherte Login-Daten (falls vorhanden)
    saved_username = request.cookies.get('saved_username', '')
    saved_password = request.cookies.get('saved_password', '')

    # Popup-Steuerung: NUR wenn spezifisch für Login/Registrierung benötigt
    show_popup = session.pop('show_popup', False)
    
    # Flags für JavaScript
    pending_registration_exists = bool(session.get('pending_registration'))
    pending_login_exists = bool(session.get('pending_login'))

    return render_template(
        'index.html',
        saved_username=saved_username,
        saved_password=saved_password,
        show_popup=show_popup,
        pending_registration_exists=pending_registration_exists,
        pending_login_exists=pending_login_exists
    )

@app.route('/login', methods=['POST'])
def login():
    try:
        username = request.form['username'].strip()
        password = request.form['password'].strip()
        # accepted aus Formular ist nochmal optional (falls JS gesetzt)
        accepted = request.form.get('accepted', 'false') == 'true'

        if not username or not password:
            flash('Bitte fülle alle Felder aus', 'error')
            return redirect(url_for('index'))

        user = User.query.filter_by(username=username).first()
        if not user or not user.check_password(password):
            flash('Ungültige Anmeldedaten', 'error')
            return redirect(url_for('index'))

        # **WICHTIG: Prüfe ob AGB bereits akzeptiert wurden**
        if not user.accepted_terms:
            # AGB noch nicht akzeptiert -> Popup anzeigen
            session['pending_login'] = username
            session['show_popup'] = True
            return redirect(url_for('index'))

        # Falls bereits akzeptiert oder accepted True im Formular
        if accepted and not user.accepted_terms:
            user.accepted_terms = True
            db.session.commit()

        session['username'] = username
        session.permanent = False

        target_endpoint = 'admin_panel' if user.is_admin else 'playermenu'
        return redirect(url_for(target_endpoint))

    except Exception as e:
        db.session.rollback()
        print(f"Fehler beim Login: {str(e)}")
        flash('Ein unerwarteter Fehler ist aufgetreten.', 'error')
        return redirect(url_for('index'))

@app.route('/register', methods=['POST'])
def register():
    try:
        username = request.form['username'].strip()
        password = request.form['password'].strip()
        accepted = request.form.get('accepted', 'false') == 'true'

        if not username or not password:
            flash('Bitte fülle alle Felder aus', 'error')
            return redirect(url_for('index'))

        if len(username) > 12:
            flash('Benutzername darf maximal 12 Zeichen haben', 'error')
            return redirect(url_for('index'))

        if User.query.filter_by(username=username).first():
            flash('Benutzername bereits vergeben', 'error')
            return redirect(url_for('index'))

        if len(password) < 5:
            flash('Passwort muss mindestens 5 Zeichen haben!', 'error')
            return redirect(url_for('index'))

        # **WICHTIG: Bei Registrierung IMMER Popup anzeigen**
        session['pending_registration'] = {'username': username, 'password': password}
        session['show_popup'] = True
        return redirect(url_for('index'))

    except Exception as e:
        db.session.rollback()
        print(f"Fehler bei der Registrierung: {str(e)}")
        flash('Ein unerwarteter Fehler ist aufgetreten.', 'error')
        return redirect(url_for('index'))

@app.route('/finalize_registration', methods=['POST'])
def finalize_registration():
    """Wird nur aufgerufen, wenn in session['pending_registration'] Daten liegen."""
    try:
        pending = session.pop('pending_registration', None)
        session.pop('show_popup', None)
        if not pending:
            return jsonify({'success': False, 'error': 'Keine Registrierung offen'}), 400

        new_user = User(
            username=pending['username'],
            first_played=datetime.now(timezone.utc),
            accepted_terms=True
        )
        new_user.set_password(pending['password'])
        db.session.add(new_user)
        db.session.commit()

        session['username'] = pending['username']
        target = url_for('admin_panel' if new_user.is_admin else 'playermenu')
        return jsonify({'success': True, 'redirect': target})
    except Exception as e:
        db.session.rollback()
        print(f"Fehler in finalize_registration: {e}")
        return jsonify({'success': False, 'error': 'Serverfehler'}), 500







@app.route('/accept_terms', methods=['POST'])
def accept_terms():
    """Setzt accepted_terms=True für bereits existierenden User (Login-Fall) oder für pending_login."""
    try:
        # Erst prüfen ob ein username in Session ist (falls bereits eingeloggt)
        username = session.get('username')

        # Falls nicht, prüfen ob pending_login vorhanden (Login-Fall)
        if not username:
            pending_login = session.pop('pending_login', None)
            if not pending_login:
                return jsonify({'success': False, 'error': 'Nicht eingeloggt und kein Pending-Login'}), 403
            username = pending_login
            # wir werden den Benutzer nach dem Speichern in die Session schreiben

        user = User.query.filter_by(username=username).first()
        if not user:
            return jsonify({'success': False, 'error': 'Benutzer nicht gefunden'}), 404

        user.accepted_terms = True
        db.session.commit()

        # Wenn wir von pending_login kamen, setzen wir session['username']
        if 'username' not in session or session.get('username') != username:
            session['username'] = username

        # Entferne Popup-Flag
        session.pop('show_popup', None)

        target = url_for('admin_panel' if user.is_admin else 'playermenu')
        return jsonify({'success': True, 'redirect': target})
    except Exception as e:
        db.session.rollback()
        print(f"Fehler bei accept_terms: {e}")
        return jsonify({'success': False, 'error': 'Serverfehler'}), 500



@app.route('/reject_acceptance', methods=['POST'])
def reject_acceptance():
    try:
        session.pop('pending_registration', None)
        session.pop('pending_login', None)
        session.pop('show_popup', None)

        # Falls username in session und der Benutzer noch nicht akzeptiert hat, entfernen wir username
        username = session.get('username')
        if username:
            user = User.query.filter_by(username=username).first()
            if user and not user.accepted_terms:
                session.pop('username', None)

        return jsonify({'success': True})
    except Exception as e:
        print(f"Fehler in reject_acceptance: {e}")
        return jsonify({'success': False, 'error': 'Serverfehler'}), 500